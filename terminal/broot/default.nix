{lib, pkgs, ...}:
{
  programs.broot = {
    enable = true;
    enableZshIntegration = true;
    settings = {
      verbs = [
        {
          invocation = "edit";
          key = "right";
          apply_to = "text_file";
          execution = "open-helix-wez {file}";
          leave_broot = false;
        }
        {
          invocation = "edit";
          key = "enter";
          apply_to = "text_file";
          execution = "open-helix-wez {file}";
          leave_broot = false;
        }
        {
          invocation = "edit_full";
          key = "ctrl-enter";
          apply_to = "text_file";
          execution = "$EDITOR {file}";
          leave_broot = false;
        }
      	{
      		name = "touch";
          shortcut = "tc";
      		invocation = "touch {filename}";
      		execution = "touch {directory}/{filename}";
          leave_broot = false;
      	}
      	{
      		name = "mkdir";
          shortcut = "mk";
          invocation = "mkdir {subpath}";
          external = "mkdir -p {directory}/{subpath}";
          leave_broot = false;
      	}
        {
          invocation = "rm";
          key = "alt-del";
          external = "rm {file}";
          leave_broot = false;
        }
      ];
    };
  };

#   xdg.configFile."broot/conf.hjson".source = ./config/conf.hjson;
#   xdg.configFile."broot/verbs.hjson".source =  ./config/verbs.hjson;
#   xdg.configFile."broot/skins/catppuccin-mocha.hjson".source =  ./config/skins/catppuccin-mocha.hjson;
#   xdg.configFile."broot/skins/white.hjson".source =  ./config/skins/white.hjson;

#   # do zsh stuff for `br` alias
#   programs.zsh.initExtra = ''
# # This script was automatically generated by the broot program
# # More information can be found in https://github.com/Canop/broot
# # This function starts broot and executes the command
# # it produces, if any.
# # It's needed because some shell commands, like `cd`,
# # have no useful effect if executed in a subshell.
# function br {
#     local cmd cmd_file code
#     cmd_file=$(mktemp)
#     if broot --outcmd "$cmd_file" "$@"; then
#         cmd=$(<"$cmd_file")
#         command rm -f "$cmd_file"
#         eval "$cmd"
#     else
#         code=$?
#         command rm -f "$cmd_file"
#         return "$code"
#     fi
# }'';

  # idea from: https://quantonganh.com/2023/08/02/file-tree-workaround-for-helix.md
  home.packages = [
    # kitty
    ( pkgs.writeShellScriptBin "open-term-right-kitty" ''
    #!/usr/bin/env sh
    fpath="$1"

    # will still print errors, and idk why we have to do \e\e tho
    kitten @ focus-window --match 'neighbor:right' \
      && kitten @ send-text "\e\e:open $fpath\r" \
      || kitten @ action launch --cwd=current --location=vsplit hx $fpath
    '')
    # wezterm
    ( pkgs.writeShellScriptBin "open-term-right-wez" ''
    #!/bin/sh
    fpath="$1"

    pane_id=$(wezterm cli get-pane-direction right)

    if [ -z "$pane_id" ]; then
      wezterm cli split-pane --right --percent 80 --cwd "''${fpath%/*}/" "hx" "$fpath" # use \'\' to escape $ (we need $ in bash script, not in nix)
    else
      program=$(wezterm cli list | awk -v pane_id="$pane_id" '$3==pane_id { print $6 }')
      if [ "$program" = "hx" ] || [ "$program" = ".hx-wrapped" ]; then
        # escape + open file + enter
        wezterm cli send-text --pane-id $pane_id --no-paste $'\e'
        wezterm cli send-text --pane-id $pane_id --no-paste ":open $fpath"
        wezterm cli send-text --pane-id $pane_id --no-paste $'\r'
      else
        echo "hx $fpath" | wezterm cli send-text --pane-id $pane_id --no-paste
      fi
    fi

    wezterm cli activate-pane-direction --pane-id $pane_id right    
    '')
    # wezterm helix new tab
    ( pkgs.writeShellScriptBin "open-helix-wez" ''
    #!/bin/sh
    fpath="$1"

    # we could use $WEZTERM_PANE instead
    current_pane_id=$(wezterm cli list-clients --format json | jq -r '.[] | .focused_pane_id')
    window_id=$(wezterm cli list --format json | jq -r ".[]|select(.pane_id == $current_pane_id) | .window_id")
    pane_id=$(wezterm cli list --format json | jq -r "[.[]|select(.window_id == $window_id) | select(.pane_id != $current_pane_id)][0] .pane_id")
    if [ $pane_id = null ]; then 
      wezterm cli spawn --cwd "''${fpath%/*}/" "hx" "$fpath"
    else
      program=$(wezterm cli list --format json | jq -r ".[]|select(.pane_id == $pane_id) | .title")
      wezterm cli activate-tab --tab-relative 1
      if [ "$program" = "hx" ] || [ "$program" = ".hx-wrapped" ]; then
        wezterm cli send-text --pane-id $pane_id --no-paste $'\e'
        wezterm cli send-text --pane-id $pane_id --no-paste ":open $fpath"
        wezterm cli send-text --pane-id $pane_id --no-paste $'\r'
      else
        echo "hx $fpath" | wezterm cli send-text --pane-id $pane_id --no-paste
      fi
    fi
    '')
  ];
}
